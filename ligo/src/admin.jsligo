#import "types.jsligo" "Types"

export type simple_admin =
    ["Set_admin", address]
  | ["Confirm_admin", unit]
  | ["Pause", bool];

type tezrun_storage = Types.tezrun_storage;

type return_type = [list<operation>, tezrun_storage];

const set_admin = ([new_admin, s] : [address, tezrun_storage]) : tezrun_storage => {
  return {
    ...s,
    pending_admin: Some(new_admin)
  };
};

const confirm_new_admin = (s : tezrun_storage) : tezrun_storage => {
  return match(s.pending_admin, {
    None: () => failwith("NO_PENDING_ADMIN"),
    Some: (pending: address) => {
      if (Tezos.get_sender() == pending) {
        return {
          ...s,
          pending_admin: None() as option<address>,
          admin: Tezos.get_sender(),
        };
      } else {
        return failwith("NOT_A_PENDING_ADMIN");
      }
    },
  });
};

const pause = ([paused, s]: [bool, tezrun_storage]) : tezrun_storage => {
  return {
    ...s,
    paused: paused,
  };
};

const fail_if_not_admin = (a : tezrun_storage) : unit => {
  if (Tezos.get_sender() != a.admin) {
    return failwith("NOT_AN_ADMIN");
  } else {
    return unit;
  };
};

const fail_if_paused = (a : tezrun_storage) : unit => {
  if (a.paused) {
    return failwith("PAUSED");
  } else {
    return unit;
  };
};

export const main = ([param, storage] : [simple_admin, tezrun_storage]) : return_type => {
  match(param, {
    Set_admin: (new_admin: address) => {
      fail_if_not_admin(storage);
      const s = set_admin(new_admin, storage);
      return [(list([]) as list<operation>), s];
    },
    Confirm_admin: () => {
      const s = confirm_new_admin(storage);
      return [(list([]) as list<operation>), s];
    },
    Pause: (paused: bool) => {
      fail_if_not_admin(storage);
      const s = pause(paused, storage);
      return [(list([]) as list<operation>), s];
    }
  });
};