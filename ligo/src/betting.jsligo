#import "types.jsligo" "Types"
#import "fa2_interface.jsligo" "FA2"

type ticket = Types.ticket;
type ticket_list = Types.ticket_list; 
type reward = Types.reward;
type reward_ledger = Types.reward_ledger;
type tezrun_storage = Types.tezrun_storage;

type return_type = [list<operation>, tezrun_storage];

type place_bet_param = {
  race_id : nat,
  horse_id : nat,
  payout : nat,
  token : int,
  amount : nat,
};

export type betting_param = 
    ["Place_bet", place_bet_param]
  | ["Take_rewards"];

const empty_operation_list = (list([]) as list<operation>);

const place_bet = ([param, storage] : [place_bet_param, tezrun_storage]) : return_type => {
  /// Check if the race is ready state.
  if (storage.status != (1 as nat)) {
    return failwith("RACE_IS_NOT_READY_STATE");
  }
  /// Betting by tezos
  else if (param.token == 0) {
    if (Tezos.get_amount() == (0 as tez)) {
      return failwith("INVALID_TEZOS_AMOUNT");
    } else {
      const ticket: ticket = {
        address: Tezos.get_sender(),
        race_id: param.race_id,
        horse_id: param.horse_id,
        payout: param.payout,
        tezos: Tezos.get_amount(),
        token: 0,
        amount: 0 as nat,
      };
      const tickets = list([ticket, ...storage.tickets]);
      const new_s: tezrun_storage = {
        ...storage,
        tickets,
      };
      return [empty_operation_list, new_s];
    }
  }
  /// Betting by token (uUSD)
  else if (param.token == 1) {
    if (param.amount == (0 as nat)) {
      return failwith("INVALID_TOKEN_AMOUNT");
    }
    else if (storage.uusd == (None() as option<address>)) {
      return failwith("NOT_SUPPORTED_TOKEN");
    }
    else {
      // Transfer token to this contract
      const contract_addr: address = Option.unopt(storage.uusd);
      const contract = Tezos.get_contract_with_error(contract_addr, "INVALID_CONTRACT") as contract<FA2.transfer>;
      const dest: FA2.transfer_destination = {
        to_: Tezos.get_self_address(),
        token_id: 0 as nat,
        amount: param.amount,
      };
      const transfer_params: FA2.transfer = {
        from_: Tezos.get_sender(),
        txs: list([dest]) as list<FA2.transfer_destination>,
      };
      const op = Tezos.transaction(transfer_params, 0 as tez, contract);

      const ticket: ticket = {
        address: Tezos.get_sender(),
        race_id: param.race_id,
        horse_id: param.horse_id,
        payout: param.payout,
        tezos: 0 as tez,
        token: param.token,
        amount: param.amount,
      };
      const tickets: ticket_list = list([ticket, ...storage.tickets]);
      const new_s : tezrun_storage = {
        ...storage,
        tickets,
      };
      return [(list([op]) as list<operation>), new_s];
    }    
  }
  else {
    return failwith("INVALID_TOKEN");
  }
};

const take_rewards = (storage: tezrun_storage) : return_type => {
  const sender = Tezos.get_sender();
  const rewards = storage.rewards;

  const reward_opt: option<reward> = Big_map.find_opt(sender, rewards);
  const reward = Option.unopt_with_error(reward_opt, "NO_REWARDS");
  if (reward.tezos > (0 as tez)) {
    const balance = Tezos.get_balance();
    if (reward.tezos > balance) {
      return failwith("NO_ENOUGH_BALANCE");
    } else {
      const receiver = Tezos.get_contract_with_error(sender, "INVALID_ADDRESS") as contract<unit>;
      const op = Tezos.transaction(unit, reward.tezos, receiver);

      // Reset tezos of the sender
      const new_reward: reward = {
        ...reward,
        tezos: 0 as tez,
      };
      const new_rewards = Big_map.update(sender, Some(new_reward), rewards);
      const new_s = {
        ...storage,
        rewards: new_rewards,
      }
      return [list([op]), new_s];
    }
  } else if (reward.tokens > (0 as nat)) {
    const amount = reward.tokens;
    const contract_addr: address = Option.unopt(storage.uusd);
    const contract = Tezos.get_contract_with_error(contract_addr, "INVALID_CONTRACT") as contract<FA2.transfer>;
    const dest: FA2.transfer_destination = {
      to_: Tezos.get_sender(),
      token_id: 0 as nat,
      amount: amount,
    };
    const transfer_params: FA2.transfer = {
      from_: Tezos.get_self_address(),
      txs: list([dest]) as list<FA2.transfer_destination>,
    };
    const op = Tezos.transaction(transfer_params, 0 as tez, contract);

    // Update tokens
    const new_reward: reward = {
      ...reward,
      tokens: 0 as nat,
    };
    const new_rewards = Big_map.update(sender, Some(new_reward), rewards);
    const new_s = {
      ...storage,
      rewards: new_rewards,
    }
    return [list([op]), new_s];
  }

  return [list([]), storage];
}

export const main = ([param, storage] : [betting_param, tezrun_storage]) : return_type => {
  match(param, {
    Place_bet: (p: place_bet_param) => place_bet(p, storage),
    Take_rewards: () => take_rewards(storage),
  });
};