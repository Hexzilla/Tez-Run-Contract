#import "types.jsligo" "Types"

type bet = Types.bet;
type bet_list = Types.bet_list; 
type reward_ledger = Types.reward_ledger;
type race_storage = Types.race_storage;

type return_type = [list<operation>, race_storage];

type place_bet_param = {
  race_id : nat,
  horse_id : nat,
  payout : nat,
};

export type betting_param = 
    ["Place_bet", place_bet_param]
  | ["Take_rewards"];


const place_bet = ([param, storage] : [place_bet_param, race_storage]) : race_storage => {
  const betting: bet = {
    address: Tezos.get_sender(),
    race_id: param.race_id,
    horse_id: param.horse_id,
    payout: param.payout,
    amount: Tezos.get_amount(),
  };
  const new_bets: bet_list = list([betting, ...storage.bets]);
  return {
    ...storage,
    bets: new_bets,
  };
};

const take_rewards = (storage: race_storage) : race_storage => {
  const sender = Tezos.get_sender();
  const rewards = storage.rewards;

  const has_rewards = Big_map.mem(sender, rewards);
  if (!has_rewards) {
    return failwith("NO_REWARDS");
  } else {
    const amount_opt: option<tez> = Big_map.find_opt(sender, rewards);
    const amount = Option.unopt(amount_opt);

    const balance = Tezos.get_balance();
    if (amount > balance) {
      return failwith("NO_ENOUGH_BALANCE");
    } else {
      // Reset reward for sender
      const new_rewards = Big_map.update(sender, Some(0 as tez), rewards);

      if (amount > (0 as tez)) {
        /*let receiver: contract<unit> =
          match ((Tezos.get_contract_opt(sender) as option<contract<unit>>), {
            Some: (contract) => contract,
            None: () => failwith("Contract not found.")
          });
        let _ = Tezos.transaction(unit, (amount as tez), receiver);*/

        let receiver = Tezos.get_contract_with_error(sender, "Contract not found.") as contract<unit>;
        let _ = Tezos.transaction(unit, amount, receiver);
      }
      return {
        ...storage,
        rewards: new_rewards,
      }
    }
  }
}

export const main = ([param, storage] : [betting_param, race_storage]) : return_type => {
  match(param, {
    Place_bet: (p: place_bet_param) => {
      const new_s = place_bet(p, storage);
      return [(list([]) as list<operation>), new_s];
    },
    Take_rewards: () => {
      const new_s = take_rewards(storage);
      return [(list([]) as list<operation>), new_s];
    }
  })
};