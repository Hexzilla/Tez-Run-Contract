#import "types.jsligo" "Types"

type bet = Types.bet;
type bet_list = Types.bet_list; 
type reward_ledger = Types.reward_ledger;
type race_storage = Types.race_storage;

type return_type = [list<operation>, race_storage];

type place_bet_param = {
  race_id : nat,
  horse_id : nat,
  payout : nat,
};

export type betting_param = 
    ["Place_bet", place_bet_param]
  | ["Take_rewards"];


const place_bet = ([param, storage] : [place_bet_param, race_storage]) : race_storage => {
  if (storage.status != 1) {
    return failwith("NOT_ABLE_BET");
  } else {
    const betting: bet = {
      address: Tezos.get_sender(),
      race_id: param.race_id,
      horse_id: param.horse_id,
      payout: param.payout,
      amount: Tezos.get_amount(),
    };
    const new_bets: bet_list = list([betting, ...storage.bets]);
    return {
      ...storage,
      bets: new_bets,
    };
  }
};

const take_rewards = (storage: race_storage) : return_type => {
  const sender = Tezos.get_sender();
  const rewards = storage.rewards;

  const amount_opt: option<tez> = Big_map.find_opt(sender, rewards);
  const amount = Option.unopt_with_error(amount_opt, "NO_REWARDS");
  if (amount > (0 as tez)) {
    const balance = Tezos.get_balance();
    if (amount > balance) {
      return failwith("NO_ENOUGH_BALANCE");
    } else {
      const receiver = Tezos.get_contract_with_error(sender, "INVALID_ADDRESS") as contract<unit>;
      const op = Tezos.transaction(unit, amount, receiver);

      // Reset reward for sender
      const new_rewards = Big_map.update(sender, Some(0 as tez), rewards);
      const new_storage = {
        ...storage,
        rewards: new_rewards,
      }
      return [list([op]), new_storage];
    }
  }
  return [list([]), storage];
}

export const main = ([param, storage] : [betting_param, race_storage]) : return_type => {
  match(param, {
    Place_bet: (p: place_bet_param) => {
      const new_s = place_bet(p, storage);
      return [list([]), new_s];
    },
    Take_rewards: () => take_rewards(storage),
  });
};