#import "types.jsligo" "Types"

type ticket = Types.ticket;
type ticket_list = Types.ticket_list; 
type reward = Types.reward;
type reward_ledger = Types.reward_ledger;
type race_storage = Types.race_storage;

type return_type = [list<operation>, race_storage];

type place_bet_param = {
  race_id : nat,
  horse_id : nat,
  payout : nat,
  token : int,
  amount : nat,
};

export type betting_param = 
    ["Place_bet", place_bet_param]
  | ["Take_rewards"];


const place_bet = ([param, storage] : [place_bet_param, race_storage]) : race_storage => {
  if (storage.status != (1 as nat)) {
    return failwith("NOT_ABLE_BET");
  }
  else if (param.token == 0) {
    if (Tezos.get_amount() == (0 as tez)) {
      return failwith("INVALID_TEZOS");
    } else {
      const ticket: ticket = {
        address: Tezos.get_sender(),
        race_id: param.race_id,
        horse_id: param.horse_id,
        payout: param.payout,
        tezos: Tezos.get_amount(),
        token: 0,
        amount: 0 as nat,
      };
      const new_bets: ticket_list = list([ticket, ...storage.bets]);
      return {
        ...storage,
        bets: new_bets,
      };
    }
  }
  else if (param.token == 1) {
    if (param.amount == (0 as nat)) {
      return failwith("INVALID_TOKEN_AMOUNT");
    } else {
      /// TODO: Transfer token to this contract
      const ticket: ticket = {
        address: Tezos.get_sender(),
        race_id: param.race_id,
        horse_id: param.horse_id,
        payout: param.payout,
        tezos: 0 as tez,
        token: param.token,
        amount: param.amount,
      };
      const new_bets: ticket_list = list([ticket, ...storage.bets]);
      return {
        ...storage,
        bets: new_bets,
      };
    }    
  }
  else {
    return failwith("INVALID_TOKEN");
  }
};

const take_rewards = (storage: race_storage) : return_type => {
  const sender = Tezos.get_sender();
  const rewards = storage.rewards;

  const reward_opt: option<reward> = Big_map.find_opt(sender, rewards);
  const reward = Option.unopt_with_error(reward_opt, "NO_REWARDS");
  if (reward.tezos > (0 as tez)) {
    const balance = Tezos.get_balance();
    if (reward.tezos > balance) {
      return failwith("NO_ENOUGH_BALANCE");
    } else {
      const receiver = Tezos.get_contract_with_error(sender, "INVALID_ADDRESS") as contract<unit>;
      const op = Tezos.transaction(unit, reward.tezos, receiver);

      const new_reward: reward = {
        ...reward,
        tezos: 0 as tez,
      };
      // Reset reward for sender
      const new_rewards = Big_map.update(sender, Some(new_reward), rewards);
      const new_storage = {
        ...storage,
        rewards: new_rewards,
      }
      return [list([op]), new_storage];
    }
  }
  return [list([]), storage];
}

export const main = ([param, storage] : [betting_param, race_storage]) : return_type => {
  match(param, {
    Place_bet: (p: place_bet_param) => {
      const new_s = place_bet(p, storage);
      return [list([]), new_s];
    },
    Take_rewards: () => take_rewards(storage),
  });
};